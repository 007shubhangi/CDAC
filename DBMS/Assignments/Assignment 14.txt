Assignment – 14
Entering, Deleting, and Changing Field Values.


1) Write a command that puts the following values, in their given order, into the 
salespeople table: city – San Jose, name – Blanco, comm – NULL, snum – 1100.


mysql> insert into  salespeople(city,sname,comm,snum) values('San Jose','Blanco',NULL,1100);
Query OK, 1 row affected (0.01 sec)

mysql> select * from salespeople;
+------+---------+-----------+------+
| Snum | Sname   | City      | Comm |
+------+---------+-----------+------+
| 1001 | Peel    | London    | 0.12 |
| 1002 | Serres  | San Jose  | 0.13 |
| 1004 | Motika  | london    | 0.11 |
| 1007 | Refkit  | Barcelona | 0.15 |
| 1003 | Axelrod | New York  | 0.10 |
| 1100 | Blanco  | San Jose  | NULL |
+------+---------+-----------+------+

/******************************************************************/



2) Write a command that removes all orders from customer Clemens from the 
Orders table.

mysql> delete from orders where cnum = (select cnum from customers where cname = 'Clemens');
Query OK, 2 rows affected (0.01 sec)



Sql Assignments


Assignment –1

Creating sample tables and inserting values.

Create the following tables with the given structures and insert sample data as specified: -

A) SALESPEOPLE

Snum number(4)
Sname varchar2(10)
city varchar2(10)
Comm number(3,2)

Answer:
CREATE TABLE salespeople ( snum number(4), sname varchar2(10), city varchar2(10), comm number(3,2) );

B) CUSTOMERS

Cnum number(4)
Cname varchar2(10)
City varchar2(10)
Rating number(4)
Snum number(4)

Answer:
CREATE TABLE customers ( cnum number(4), cname varchar2(10), city varchar2(10), rating number(4), snum number(4) );

C) ORDERS

Onum number(4)
Amt number(7,2)
Odate date
Cnum number(4)
Snum number(4)

Answer:
CREATE TABLE orders ( onum number(4), amt number(7,2), odate date, cnum number(4), snum number(4) );


SALES PEOPLE

SNUM    SNAME    CITY     COMM

1001    Peel    London     .12
1002    Serres    San Jose    .13
1004  Motika    London     .11
1007    Rifkin    Barcelona    .15
1003    Axelrod  New York    .10


INSERT INTO salespeople
VALUES(&snum,’&name’,’&city’,&comm);


CUSTOMERS


CNUM    CNAME     CITY     RATING    SNUM

2001  Hoffman    London     100    1001
2002  Giovanni    Rome     200    1003
2003    Liu     San Jose    200    1002
2004    Grass     Berlin     300    1002
2006    Clemens    London     100    1001
2008    Cisneros    San Jose    300    1007
2007    Pereira    Rome     100    1004


ORDERS
INSERT INTO customers
VALUES(&cnum,’&cname’,’&city’,&rating,&snum);

ONUM    AMT     ODATE  CNUM SNUM

3001    18.69     03- OCT -1990    2008 1007
3003    767.19     03- OCT -1990    2001 1001
3002    1900.10    03- OCT -1990    2007 1004
3005    5160.45    03- OCT -1990    2003 1002
3006    1098.16    03- OCT -1990    2008 1007
3009    1713.23    04- OCT -1990    2002 1003
3007    75.75     04- OCT -1990    2004 1002
3008    4723.00    05- OCT -1990    2006 1001
3010    1309.95    06- OCT -1990    2004 1002
3011    9891.88    06- OCT -1990    2006 1001


INSERT INTO orders
VALUES(&onum,&amt,’&odate’,&cnum,&snum);

ONUM AMT ODATE CNUM SNUM
INSERT INTO ORDERS
VALUES(3001,18.69,'03-OCT-1990',
                  2008,
                  1007);

INSERT INTO ORDERS
VALUES(3003,767.19,'03- OCT -1990',
                   2001,
                   1001);

INSERT INTO ORDERS
VALUES(3002,1900.10,'03- OCT -1990',
                    2007,
                    1004);

INSERT INTO ORDERS
VALUES(3005,5160.45,'03- OCT -1990',
                    2003,
                    1002);

INSERT INTO ORDERS
VALUES(3006,1098.16,'03- OCT -1990',
                    2008,
                    1007);

INSERT INTO ORDERS
VALUES(3009,1713.23,’04- OCT -1990’,2002,
                                    1003);

INSERT INTO ORDERS
VALUES(3007,75.75,’04- OCT -1990’,2004,
                                  1002);

INSERT INTO ORDERS
VALUES(3008,4723.00,’05- OCT -1990’,2006,
                                    1001);

INSERT INTO ORDERS
VALUES(3010,309.95,’06-OCT -1990’,2004,
                                  1002);

INSERT INTO ORDERS
VALUES(3011,9891.88,’06- OCT -1990’,2006,
                                    1001);

Assignment –2

##Introducing Relational Databases.

1) Which field of the Customers table is the primary key?
Ans :- customer number

2) What is the 4th column of the Customers table?
Ans:- Rating

3) What is another word for row? For column?
Ans:- duple or record

4) Why isn’t it possible to see the first five rows of a table?
Ans :- Because tuples don’t have orders.


Assignment –3

##Overview of SQL.

1) Does ANSI recognize the data type DATE?

Ans :- Yes.


2) Which subdivision of SQL is used to put values in tables?

Ans :- insert into values


Assignment –4

##Retrieving Information from Tables.

1) Write a select command that produces the order number, amount, and date for all
rows in the Orders table.

SELECT onum,
       amt,
       odate
FROM orders;

UM   AMT    ODATE

3001    18.69     03-OCT-90
3003    767.19     03-OCT-90
3002    1900.1     03-OCT-90
3005    5160.45    03-OCT-90
3006    1098.16    03-OCT-90
3009    1713.23    04-OCT-90
3007    75.75     04-OCT-90
3008    4723     05-OCT-90
3010    1309.95    06-OCT-90
3011    9891.88    06-OCT-90

10 rows selected.


2) Write a query that produces all rows from the Customers table for which the
salesperson’s number is 1001.
SELECT *
FROM customers
WHERE snum=1001;

CNUM CNAME  CITY  RATING   SNUM

2001  hoffman  london   100   1001
2006  clemens  london   100   1001


3) Write a query that displays the Salespeople table with the columns in the
following order: city, sname, snum, comm.
SELECT city,
       sname,
       snum,
       comm.
FROM salespeople;

CITY   SNAME   SNUM   COMM

london     peel     1001     .12
san jose    serres   1002     .13
newyork    axelrod    1003     .1
london     Motika     1004     .11
barcelona    rifkin     1007     .15


4) Write a select command that produces the rating followed by the name of each
customer in San Jose.
SELECT rating||' '||cname "employee rating"
FROM customers
WHERE city='sanjose';

employee    rating

300    cisneros


5) Write a query that will produce the snum values of all salespeople (suppress the
duplicates) with orders in the Orders table.
SELECT DISTINCT snum,
                onum
FROM salespeople
ORDER BY snum;

SNUM  ONUM

1002  3007
1002  3010
1001  3011
1004  3002
1002  3005
1007  3006
1003  3009
1001  3008
1007  3001
1001  3003

10 rows selected.

Assignment –5

##Relational and Logical Operators.

1) Write a query that will give you all orders for more than Rs. 1,000.
SELECT *
FROM orders
WHERE amt>1000;

ONUM    AMT   ODATE  CNUM SNUM

3002    1900.1     03-OCT-90    2007    1004
3005    5160.45    03-OCT-90    2003    1002
3006    1098.16    03-OCT-90    2008    1007
3009    1713.23    04-OCT-90    2002    1003
3008    4723     05-OCT-90    2006    1001
3010    1309.95    06-OCT-90    2004    1002
3011    9891.88    06-OCT-90    2006  1001

7 rows selected.


2) Write a query that will give you the names and cities of all salespeople in London
with a commission above .10.
SELECT sname,
       city
FROM salespeople
WHERE city='London'
  AND comm >.10;

SNAME     CITY

peel     London
Motika     London


3) Write a query on the Customers table whose output will exclude all customers
with a rating <= 100, unless they are located in Rome.
SELECT *
FROM customers
WHERE rating>100
  OR city='rome';

CNUM  CNAME    CITY   RATING   SNUM
2002    Giovanni    Rome      200     1003
2003    Liu     San Jose     200     1002
2004    Grass     Berlin      300     1002
2008    Cisneros    San Jose     300     1007
2007    Pereira    Rome      100     1004

4) What will be the output from the following query?

SELECT *
FROM Orders
WHERE (amt < 1000
       OR NOT (odate = ‘03-OCT-1990’
               AND cnum > 2003));

ONUM    AMT     ODATE      CNUM    SNUM

3001    18.69     03-OCT-90     2008    1007
3003    767.19     03-OCT-90     2001    1001
3005    5160.45    03-OCT-90     2003    1002
3009    1713.23    04-OCT-90     2002    1003
3007    75.75    04-OCT-90    2004   1002
3008   4723     05-OCT-90     2006    1001
3010    1309.95    06-OCT-90     2004    1002
3011    9891.88    06-OCT-90     2006    1001

Display all tauple from order except date is 03-oct 1990 with cnum >2003 or orders
where amt is less then 1000 or

Display all order having amount less then 1000 or having order except on 03-oct-1990
with cnum>2003.


5) What will be the output of the following query?
SELECT *
FROM Orders
WHERE NOT ((odate = ‘03-OCT-1990’
            OR snum>1006)
           AND amt >= 1500);

ONUM    AMT     ODATE      CNUM    SNUM

3001    18.69     03-OCT-90   2008    1007
3003    767.19     03-OCT-90     2001    1001
3006    1098.16    03-OCT-90     2008    1007
3009    1713.23   04-OCT-90     2002    1003
3007    75.75     04-OCT-90     2004    1002
3008    4723     05-OCT-90     2006    1001
3010    1309.95    06-OCT-90     2004    1002
3011    9891.88    06-OCT-90     2006    1001


6) What is a simpler way to write this query?
SELECT snum,
       sname,
       city,
       comm
FROM Salespeople
WHERE (comm > .12
       OR comm <.14);
SELECT snum,
       sname,
       city,
       comm
FROM Salespeople
WHERE (comm > .
  SELECT snum,
         sname,
         city,
         comm
  FROM salespeople WHERE comm =.13;

12
OR comm <.14);

SNUM    SNAME     CITY     COMM

1002    Serres     San Jose    .13


Assignment –6

##Using Special Operators in Conditions.

1) Write two different queries that would produce all orders taken on October 3rd or
4th, 1990.
SELECT *
FROM orders
WHERE odate='03-oct-1990'
  OR odate='04-oct-1990';

ONUM    AMT     ODATE    CNUM  SNUM

3001    18.69     03-OCT-90     2008    1007
3003    767.19     03-OCT-90     2001    1001
3002    1900.1     03-OCT-90     2007    1004    
3005    5160.45    03-OCT-90     2003    1002
3006    1098.16    03-OCT-90     2008    1007
3009    1713.23    04-OCT-90     2002    1003
3007    75.75     04-OCT-90     2004    1002

7 rows selected.

SET feedback OFF; --feed back disable

SET feedback ON; --for feed back enable

SELECT *
FROM orders
WHERE odate BETWEEN '03-oct-1990' AND '04-oct-1990';

ONUM    AMT     ODATE      CNUM    SNUM

3001    18.69     03-OCT-90     2008    1007
3003    767.19     03-OCT-90     2001    1001
3002    1900.1     03-OCT-90     2007    1004
3005  5160.45    03-OCT-90     2003    1002
3006    1098.16    03-OCT-90     2008    1007
3009    1713.23    04-OCT-90     2002    1003
3007    75.75     04-OCT-90     2004    1002


2) Write a query that selects all of the customers serviced by Peel or Motika.
(Hint: the snum field relates the two tables to one another).
SELECT *
FROM customers
WHERE snum IN
    (SELECT snum
     FROM salespeople
     WHERE sname='Peel'
       OR sname='Motika');

CNUM  CNAME   CITY    RATING  SNUM

2006    Clemense    London      100    1001
2001    Hoffman    London      100    1001
2008    Cisneros    San Jose     300    1007


3) Write a query that will produce all the customers whose names begin with a letter
from ‘A’ to ‘G’.
SELECT *
FROM customers
WHERE cname LIKE 'a%'
  OR cname LIKE 'b%'
  OR cname LIKE 'C%'
  OR cname LIKE 'D%'
  OR cname LIKE 'E%'
  OR cname LIKE 'F%'
  OR cname LIKE 'G%' ;

CNUM  CNAME   CITY    RATING  SNUM

2002    Giovanni    Rome      200    1003
2004    Grass     Berlin      300    1002
2006    Clemense    London      100    1001
2008    Cisneros    San Jose     300    1007

4 rows selected.

Second approach
SELECT *
FROM customers
WHERE substr(cname,1,1) BETWEEN 'A' AND 'G';

CNUM    CNAME    CITY    RATING    SNUM

2002  Giovanni   Rome    200   1003
2004    Grass      Berlin      300    1002
2006    Clemense     London      100    1001
2008    Cisneros     San Jose     300    1007


4) Write a query that selects all customers whose names begin with the letter ‘C’.
SELECT *
FROM customers
WHERE cname LIKE 'C%';

CNUM    CNAME      CITY      RATING    SNUM

2006    Clemense     London      100    1001
2008    Cisneros     San Jose     300    1007

2 rows selected.


5) Write a query that selects all orders except those with zeroes or NULLs in the amt
field.
SELECT *
FROM orders
WHERE amt IS NOT NULL;

ONUM     AMT     ODATE      CNUM     SNUM

3001     18.69     03-OCT-90     2008     1007
3003     767.19     03-OCT-90     2001     1001
3002     1900.1     03-OCT-90     2007     1004
3005     5160.45    03-OCT-90     2003     1002
3006   1098.16    03-OCT-90     2008     1007
3009     1713.23    04-OCT-90     2002     1003
3007     75.75     04-OCT-90     2004     1002
3008   4723     05-OCT-90     2006     1001
3010     1309.95    06-OCT-90     2004     1002
3011     9891.88    06-OCT-90     2006     1001

10 rows selected.


Assignment –7

##Summarizing Data with Aggregate Functions.

1) Write a query that counts all orders for October 3.
SELECT count(onum) total_order
FROM orders
WHERE odate LIKE '03-OCT-%';

TOTAL_ORDER

5

1 row selected.

2) Write a query that counts the number of different non-NULL city values in the
Customers table.

SELECT count(cname) empty_city
FROM customers
WHERE cname IS NOT NULL;

EMPTY_CITY

7

3) Write a query that selects each customer’s smallest order.
SELECT min(amt) ) "smallest order",
                  cnum
FROM orders
GROUP BY cnum;

MIN(AMT)    CNUM

767.19     2001
4723     2006
1900.1     2007
5160.45    2003
75.75     2004
18.69     2008
1713.23    2002

7 rows selected.


4) Write a query that selects the first customer, in alphabetical order, whose name
begins with G.
SELECT *
FROM customers
WHERE cname LIKE 'G%'
ORDER BY cname;

CNUM    CNAME     CITY     RATING

2002    Giovanni    Rome     200     1003
2004    Grass     Berlin     300     1002

2 rows selected.


5) Write a query that selects the highest rating in each city.
SELECT max(rating) "highest rating"
FROM customers;

highest rating

300


1 row selected.


6) Write a query that counts the number of salespeople registering orders for each
day. (If a salesperson has more than one order on a given day, he or she should be
counted only once.).
SELECT count(odate)||' SALES PERSON REGISTREDDON' "TOTAL",
       odate
FROM orders
GROUP BY odate;

TOTAL            ODATE

2 SALES PERSON REGISTREDD ON      04-OCT-90
1 SALES PERSON REGISTREDD ON      05-OCT-90
5 SALES PERSON REGISTREDD ON      03-OCT-90
2 SALES PERSON REGISTREDD ON      06-OCT-90


Assignment –8

##Formatting Query output.

1) Assume each salesperson has a 12% commission. Write a query on the orders
table that will produce the order number, the salesperson number, and the amount
of the salesperson’s commission for that order.
SELECT onum,
       snum,
       amt,
       (amt*12)/100 commision
FROM orders;

ONUM   SNUM   AMT    COMMISION

3001   1007   18.69    2.2428
3003   1001  767.19    92.0628
3002   1004   1900.1    228.012
3005   1002   5160.45   619.254
3006   1007   1098.16   131.7792
3009   1003   1713.23   205.5876
3007   1002   75.75    9.09
3008   1001   4723    566.76
3010   1002    1309.95    157.194
3011    1001    9891.88    1187.0256

10 rows selected.


2) Write a query on the Customers table that will find the highest rating in each city.
Put the output in this form:

For the city (city), the highest rating is : (rating).
SELECT onum,
       snum,
       amt,
       (amt*12)/100 commision
FROM orders;

ONUM    SNUM    AMT     COMMISION

3001    1007    18.69     2.2428
3003    1001    767.19     92.0628
3002    1004    1900.1     228.012
3005    1002    5160.45    619.254
3006    1007    1098.16    131.7792
3009    1003    1713.23    205.5876
3007    1002    75.75     9.09    
3008    1001    4723     566.76
3010    1002    1309.95    157.194
3011    1001    9891.88    1187.0256

10 rows selected.


3) Write a query that lists customers in descending order of rating. Output the rating
field first, followed by the customer’s name and number.
SELECT rating,
       cname,
       snum
FROM customers
ORDER BY rating DESC;

RATING    CNAME     SNUM

300    grass     1002
300    cisneros    1007
200    giovanni    1003
100    pereira    1004
100    clemens    1001
100    hoffman    1001


4) Write a query that totals the orders for each day and places the results in
descending order.
SELECT count(odate) "TOTAL ORDERS",
       odate
FROM orders
GROUP BY odate
ORDER BY "TOTAL ORDERS";

TOTAL   ORDERS ODATE

1    05-OCT-90
2    06-OCT-90
2  04-OCT-90
5  03-OCT-90


Assignment – 9

##Querying Multiple Tables at Once.

1) Write a query that lists each order number followed by the name of the customer
who made the order.
SELECT onum,
       cname
FROM orders o,
     customers c
WHERE c.cnum=o.cnum ;

ONUM    CNAME

3001    cisneros
3003    hoffman
3002    pereira
3006    cisneros
3009    giovanni
3007    grass
3008    clemens
3010    grass
3011    clemens

9 rows selected.


2) Write a query that gives the names of both the salesperson and the customer for
each order along with the order number.
SELECT sname,
       cname,
       onum
FROM orders o,
     customers c,
     salespeople s
WHERE o.snum=c.snum
  AND o.snum=s.snum;

SNAME     CNAME     ONUM

peel     hoffman    3011
peel     hoffman    3008
peel     hoffman    3003
axelrod    giovanni    3009
serres     grass     3010
serres     grass     3007
serres     grass     3005
peel     clemens    3011
peel     clemens    3008
peel     clemens    3003
rifkin     cisneros    3006

SNAME     CNAME     ONUM

rifkin     cisneros    3001
Motika     pereira    3002

13 rows selected.


3) Write a query that produces all customers serviced by salespeople with a
commission above 12%. Output the customer’s name, the salesperson’s name,
and the salesperson’s rate of commission.

OLD STYLE:
SELECT cname,
       s.snum,
       comm*100 "RATE OF COMM."
FROM customers c,
     salespeople s
WHERE c.snum=s.snum
  AND comm>.12 ;

CNAME     SNUM    RATE OF COMM.

grass     1002    13
cisneros    1007    15
liu     1002    13

NEW STYLE:
SELECT cname,
       snum,
       comm*100 "RATE OF COMM."
FROM customers
JOIN salespeople USING (snum)
WHERE comm>.12;
CNAME     SNUM    RATE OF COMM.

grass     1002    13
cisneros    1007    15
liu     1002    13


4) Write a query that calculates the amount of the salesperson’s commission on each
order by a customer with a rating above 100.
SELECT amt,
       comm
FROM salespeople
JOIN customers using(snum)
JOIN orders using(snum)
WHERE rating>100;

AMT     COMM

18.69     .15
5160.45    .13
5160.45   .13
1098.16   .15
1713.23   .1
75.75     .13
75.75     .13
1309.95    .13
1309.95    .13

9 rows selected.

Assignment – 10

##Joining a Table to Itself.

1) Write a query that produces all pairs of salespeople who are living in the same city.
Exclude combinations of salespeople with themselves as well as duplicate rows with
the order reversed.
SELECT m.sname,
       n.sname,
       m.city
FROM salespeople m,
     salespeople n
WHERE m.city=n.city
  AND m.sname<n.sname;

SNAME    SNAME    CITY

Motika    peel    london


2) Write a query that produces the names and cities of all customers with the same rating
as Hoffman.
SELECT cname,
       city
FROM customers
WHERE rating =
    (SELECT rating
     FROM customers
     WHERE cname='hoffman');

CNAME     CITY

hoffman    london
clemens    london
pereira    rome

Assignment – 11

##SubQueries.


1) Write a query that uses a subquery to obtain all orders for the customer named
Cisneros. Assume you do not know his customer number (cnum).
SELECT onum "ALL ORDERS",
       cnum
FROM orders
WHERE cnum=
    (SELECT cnum
     FROM customers
     WHERE cname='cisneros');

ALLORDERS    CNUM

3001     2008
3006     2008


2) Write a query that produces the names and ratings of all customers who have
above-average orders.
SELECT cname,
       rating
FROM customers
WHERE cnum IN
    (SELECT cnum
     FROM orders
     WHERE amt >
         (SELECT avg(amt)
          FROM orders));

CNAME    RATING

liu    200
clemens  100


3) Write a query that selects the total amount in orders for each salesperson for
whom this total is greater than the amount of the largest order in the table.
SELECT sum(amt)
FROM orders
GROUP BY snum
HAVING sum(amt)>
  (SELECT max(amt)
   FROM orders);

 SUM(AMT) 15382.07

Assignment – 12

##Using the operators ANY, ALL and SOME.


1) Write a query that selects all customers whose ratings are equal to or greater than
ANY of Serres’.
SELECT *
FROM customers
WHERE rating >=ANY
    ( SELECT rating
     FROM customers
     WHERE snum IN
         ( SELECT snum
          FROM salespeople
          WHERE sname='serres' ) );

CNUM    CNAME     CITY     RATING    SNUM

2008    cisneros    san jose    300    1007
2004    grass     berliln    300    1002
2002    giovanni    rome     200    1003
2003    liu     san jose    200    1002


2) Write a query using ANY or ALL that will find all salespeople who have no
customers located in their city.
SELECT snum
FROM salespeople
WHERE (snum,
       city) NOT IN
    (SELECT snum,
            city
     FROM customers);

SNUM

1007
1004
1003


3) Write a query that selects all orders for amounts greater than any for the
customers in London.
SELECT *
FROM orders
WHERE amt> ANY
    ( SELECT amt
     FROM orders
     WHERE cnum IN
         ( SELECT cnum
          FROM customers
          WHERE city='london' ) );

ONUM    AMT  ODATE     CNUM    SNUM

3011    9891.88    06-OCT-90    2006    1001
3005    5160.45    03-OCT-90    2003    1002
3008    4723     05-OCT-90    2006    1001
3002    1900.1     03-OCT-90    2007    1004
3009    1713.23    04-OCT-90    2002    1003
3010    1309.95    06-OCT-90    2004    1002
3006    1098.16    03-OCT-90    2008    1007

7 rows selected.


4) Write the above query using MIN or MAX.
SELECT *
FROM orders
WHERE amt>
    (SELECT min(amt)
     FROM customers
     NATURAL JOIN orders
     WHERE city='london');

ONUM    AMT     ODATE     CNUM    SNUM

3002    1900.1     03-OCT-90    2007    1004
3005    5160.45    03-OCT-90    2003    1002
3006    1098.16    03-OCT-90    2008    1007
3009    1713.23    04-OCT-90    2002    1003
3008    4723     05-OCT-90    2006    1001
3010    1309.95    06-OCT-90    2004    1002
3011    9891.88    06-OCT-90    2006    1001

7 rows selected.

Assignment – 13

##Using the UNION clause.

1) Create a union of two queries that shows the names, cities, and ratings of all
customers. Those with rating of 200 or greater will also have the words “High
Rating”, while the others will have the words “Low Rating”.
SELECT cname,
       city,
       'HIGH RATING' RATING
FROM customers
WHERE rating>200
UNION
SELECT cname,
       city,
       'LOW RATING' RATING
FROM customers
WHERE rating <=200;

CNAME     CITY     RATING

cisneros    san jose    HIGH RATING
clemens    london     LOW RATING
giovanni    rome     LOW RATING
grass     berliln    HIGH RATING
hoffman    london     LOW RATING
liu     san jose    LOW RATING
pereira    rome     LOW RATING

7 rows selected.


2) Write a command that produces the name and number of each salesperson and
each customer with more than one current order. Put the results in alphabetical
order.
SELECT sname,
       snum,
       cname
FROM salespeople
JOIN customers using(snum)
WHERE snum IN
    (SELECT snum
     FROM customers
     GROUP BY snum
     HAVING count(snum)>1)
ORDER BY sname,
         cname;

SNAME    SNUM    CNAME

Seel    1001    Clemens
Seel    1001    Hoffman
Serres    1002    G
Serres    1002    Liu


3) Form a union of three queries. Have the first select the snums of all salespeople in
San Jose; the second, the cnums of all customers in San Jose; and the third the
onums of all orders on October 3. Retain duplicates between the last two queries
but eliminate any redundancies between either of them and the first.

 (Note: in the sample tables as given, there would be no such redundancy. This is
besides the point.)
SELECT snum
FROM salespeople
WHERE city='san jose'
UNION
SELECT DISTINCT snum
FROM orders
WHERE snum IN
    (SELECT snum
     FROM orders
     WHERE odate LIKE '03-OCT-%');

SNUM

 1001
 1002
 1004
 1007


Assignment – 14

##Inserting, Deleting, and Changing Field Values.


1) Write a command that puts the following values, in their given order, into the
salespeople table: city – San Jose, name – Blanco, comm – NULL, snum – 1100.
INSERT INTO salespeople (city,sname,comm,snum)
VALUES('San Jose',
       'Blanco',
       NULL,
       1100);

 --1 row created.

2) Write a command that removes all orders from customer Clemens from the
Orders table.


mysql> select * from orders;
+------+---------+------------+------+------+
| Onum | Amt     | Odate      | Cnum | Snum |
+------+---------+------------+------+------+
| 3003 |  767.19 | 1990-10-03 | 2001 | 1001 |
| 3002 | 1900.00 | 1990-10-03 | 2007 | 1004 |
| 3002 | 5160.45 | 1990-10-03 | 2003 | 1002 |
| 3006 | 1098.16 | 1990-10-03 | 2008 | 1007 |
| 3009 | 1713.23 | 1990-10-04 | 2002 | 1003 |
| 3007 |   75.75 | 1990-10-04 | 2004 | 1002 |
| 3007 | 1713.23 | 1990-10-04 | 2004 | 1002 |
| 3010 | 1309.95 | 1990-10-06 | 2004 | 1002 |
+------+---------+------------+------+------+
/******************************************************************/

3) Write a command that increases the rating of all customers in Rome by 100.

mysql> select * from customers;
+------+----------+----------+--------+------+
| Cnum | Cname    | City     | Rating | Snum |
+------+----------+----------+--------+------+
| 2001 | Hoffman  | London   |    100 | 1001 |
| 2002 | Giovanni | Rome     |    200 | 1003 |
| 2003 | Liu      | San Jose |    200 | 1002 |
| 2004 | Grass    | Berlin   |    300 | 1002 |
| 2006 | Clemens  | London   |    100 | 1001 |
| 2008 | Cisneros | San Jose |    300 | 1007 |
| 2007 | Pereira  | Rome     |    100 | 1004 |
| 2010 | prath    | NULL     |    500 | NULL |
| 2010 | prath    | NULL     |    500 | NULL |
| 2010 | prath    | india    |    500 | NULL |
| 2110 | prath    | india    |    500 | NULL |
+------+----------+----------+--------+------+
11 rows in set (0.00 sec)

mysql>  update customers set rating = (rating+100) where city="rome";
Query OK, 2 rows affected (0.01 sec)
Rows matched: 2  Changed: 2  Warnings: 0

mysql> select * from customers;
+------+----------+----------+--------+------+
| Cnum | Cname    | City     | Rating | Snum |
+------+----------+----------+--------+------+
| 2001 | Hoffman  | London   |    100 | 1001 |
| 2002 | Giovanni | Rome     |    300 | 1003 |
| 2003 | Liu      | San Jose |    200 | 1002 |
| 2004 | Grass    | Berlin   |    300 | 1002 |
| 2006 | Clemens  | London   |    100 | 1001 |
| 2008 | Cisneros | San Jose |    300 | 1007 |
| 2007 | Pereira  | Rome     |    200 | 1004 |
| 2010 | prath    | NULL     |    500 | NULL |
| 2010 | prath    | NULL     |    500 | NULL |
| 2010 | prath    | india    |    500 | NULL |
| 2110 | prath    | india    |    500 | NULL |
+------+----------+----------+--------+------+
/*******************************************************************/

4) Salesperson Serres has left the company. Assign her customers to Motika

mysql> select * from customers;
+------+----------+----------+--------+------+
| Cnum | Cname    | City     | Rating | Snum |
+------+----------+----------+--------+------+
| 2001 | Hoffman  | London   |    100 | 1001 |
| 2002 | Giovanni | Rome     |    300 | 1003 |
| 2003 | Liu      | San Jose |    200 | 1002 |
| 2004 | Grass    | Berlin   |    300 | 1002 |
| 2008 | Cisneros | San Jose |    300 | 1007 |
| 2007 | Pereira  | Rome     |    200 | 1002 |
+------+----------+----------+--------+------+

mysql> update customers set snum = (select snum from salespeople where sname='motika')where snum=(select snum from salespeople where sname =
'serres' );
Query OK, 3 rows affected (0.01 sec)
Rows matched: 3  Changed: 3  Warnings: 0

mysql> select * from customers;
+------+----------+----------+--------+------+
| Cnum | Cname    | City     | Rating | Snum |
+------+----------+----------+--------+------+
| 2001 | Hoffman  | London   |    100 | 1001 |
| 2002 | Giovanni | Rome     |    300 | 1003 |
| 2003 | Liu      | San Jose |    200 | 1004 |
| 2004 | Grass    | Berlin   |    300 | 1004 |
| 2008 | Cisneros | San Jose |    300 | 1007 |
| 2007 | Pereira  | Rome     |    200 | 1004 |
+------+----------+----------+--------+------+
6 rows in set (0.00 sec)
/***************************************************************/